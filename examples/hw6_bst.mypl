#----------------------------------------------------------------------
# HW-6 Test Program: Basic (Non-Balanced) Binary Search Tree
#----------------------------------------------------------------------


#----------------------------------------------------------------------
# tree node that holds an int value
#----------------------------------------------------------------------
struct node {
  value: int,
  right: node,
  left: node
}


#----------------------------------------------------------------------
# create a new tree
#----------------------------------------------------------------------
node make_tree(val: int) {
  return new node(val, null, null)
}


#----------------------------------------------------------------------
# insert a value into the given tree
# assumes root is not nil 
#----------------------------------------------------------------------
void insert(root: node, val: int) {
  if root == null {
    return null
  }
  if val <= root.value {
    if root.left == null {
      root.left = make_tree(val)
    }
    else {
      insert(root.left, val)
    }
  }
  else {
    if root.right == null {
      root.right = make_tree(val)
    }
    else {
      insert(root.right, val)
    }
  }
}


#----------------------------------------------------------------------
# print out the tree in sorted order
#----------------------------------------------------------------------
void print_tree(root: node) {
  if root != null {
    print_tree(root.left)
    print(root.value)
    print(" ")
    print_tree(root.right)
  }
}


#----------------------------------------------------------------------
# get the height of the tree
#----------------------------------------------------------------------
int height(root: node) {
  if root == null {
    return 0
  }
  else {
    var left_height: int = height(root.left)
    var right_height: int = height(root.right)
    if left_height >= right_height {
      return 1 + left_height
    }
    else {
      return 1 + right_height
    }
  }
}

void main() {
  # create a tree and print it
  # should print ...
  #   Tree Values: 1 2 5 7 10 12 13 14 15
  #   Tree Height: 5

  var tree: node = make_tree(10)

  insert(tree, 5)
  insert(tree, 15)
  insert(tree, 2)
  insert(tree, 12)
  insert(tree, 7)
  insert(tree, 1)
  insert(tree, 13)
  insert(tree, 14)
  print("Tree Values: ")
  print_tree(tree)
  print("\n")
  print("Tree Height: ")
  print(height(tree))
  print("\n")
}