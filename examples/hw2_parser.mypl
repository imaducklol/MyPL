
#----------------------------------------------------------------------
# MyPL file to test different parts of the parser.
# Only checks for valid syntax examples. See unit tests for additional
# test cases.
#----------------------------------------------------------------------


struct EmptyNode {
}

struct Node {
  value: int, 
  next: Node
}

struct KVNode {
  key: string, 
  value: int, 
  next: KVNode
}

struct VariousTypesTest {
  v: int, 
  w: double, 
  x: bool, 
  z: string, 
  a: [int]
}


void f1() {
  return null
}

int f2() {
  return 42
}

void f3() {
  var x1: int = 42
  var x2: double = 3.14
  var x3: bool = true
  var x4: string = "abc"
  var x5: Node = new Node(x1, null)

  var x6: int
  var x7: double
  var x8: bool
  var x9: string
  var x10: Node

  var x11 = 42
  var x12 = 3.14
  var x13 = true
  var x14 = "abc"
  var x15 = new Node(x11, null)

  var x16: int = null
  var x17: double = null
  var x18: string = null
  var x19: Node = null
}

void f4(p1: int) {
  if true {
  }
  else {
  }
}

int f5(p1: bool) {
  if p1 {
    return 42
  }
  return 43
}

int f6(p1: int, p2: int) {
  if (p1 - p2) < p1 {
    return p1
  }
  else if p2 >= p1 {
    return p2
  }
  else {
    return p1 + p2
  }
}

Node f7(v1: int, msg: string) {
  if v1 >= 1 {
    print(msg)
    return new Node(v1, null)
  }
  return null
}

bool f8(p1: int, p2: double, p3: bool, p4: char, p5: string) {
  for i from 1 to 10 {
    if (even(i)) {
      for j from 1 to j {
        if (not even(j)) {
          print(i)
        }
      }
    }
  }
  return true
}

string f9(n: int) {
  var s: string = ""
  while n > 0 {
    s = s + "a"
    n = n + 1
  }
  return s
}

double f10(x: double, y: double) {
  var r: double = 0.0
  if (x < y or x == y) and x > 0 {
    r = ((x / (x + y)) * 100) + (x * 0.1)
  }
  else if y > 0 {
    r = ((y / (x + y)) * 100) + (y * 0.1)
  }
  else {
    r = 100
  }
  return r
}

int f11(x: int) {
  if x < 1 {
    return 0 - 1
  }
  else if x == 1 {
    return 1
  }
  return f11(x-1) + f11(x-2)
}

Node f12(node: Node) {
  if node == null {
    return null
  }
  var copy = new Node(node.val, f12(node.next))
  if (copy.next == null) {
    copy.next = f12(node)
  }
  return copy
}

void f13(node: Node) {
  if node != null {
    f13(node.next)
  }
}

int f14(i: int, a: [int]) {
  if i < 0 or i >= a.size {
    return null
  }
  return a[i]
}

[int] f15(a: [int]) {
  var copy: [int] = new int[a.length / 2]
  for i from 0 to (a.length / 2) - 1 {
    copy[i] = a[i]
  }
  return copy
}
